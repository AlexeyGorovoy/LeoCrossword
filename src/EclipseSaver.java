import java.io.*;
import java.nio.charset.Charset;
import java.util.Map;

public class EclipseSaver {
    public static void setDictionary(Map<String, String> dictionary) {
        EclipseSaver.dictionary = dictionary;
    }

    static final String terminator = "\r\n";

    static Map<String, String> dictionary;

    public static void save(String filename) {
        try {

            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter( new FileOutputStream(filename), Charset.forName("CP1251")));

            bw.write("; EclipseCrossword word list" + terminator);
            bw.write("; Get EclipseCrossword free at:" + terminator);
            bw.write("; http://www.eclipsecrossword.com" + terminator);
            //bw.write("; This list generated by LeoCrossword parser:" + terminator);
            //bw.write("; https://github.com/Debilonik/LeoCrossword/" + terminator);
            bw.write(terminator);

            int maxEnWordLength = ((LeoDictionary) dictionary).getMaxKeyLength();
            int maxRuWordLength = ((LeoDictionary) dictionary).getMaxKeyLength();

            for (String wordEn : dictionary.keySet()) {
                String wordRu = dictionary.get(wordEn);
                bw.write(roundLength(wordEn.toLowerCase(), maxEnWordLength, true) + "\t\t"
                        + roundLength(wordRu.toLowerCase(), maxRuWordLength, false) + terminator);
            }

            bw.flush();
            bw.close();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void save(String filename, Map dictionary) {
        EclipseSaver.dictionary = dictionary;
        save(filename);
    }

    private static String roundLength(String str, int length, boolean front) {
        StringBuilder sb = new StringBuilder(str);

        while(sb.length() < length) {
            if (front) {
                sb.insert(0, " ");
            } else {
                sb.append(" ");
            }
        }
        return sb.toString();
    }
}
